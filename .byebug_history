exit
board.board_users
board
exit
Medium.last
medium.update(caption: params[:caption])
 medium = Medium.find_by(id: params[:id])
medium.update(caption: params[:caption])
 medium = Medium.find_by(id: params[:medium][:id])
exit
User.all
medium.errors
medium
a = _
medium = Medium.create(media_params)
exit
params[:users]
params
usernames
usernames = params[:users]
board = Board.create(board_params)
params
exit
params[:users]
params.users
params
exit
Board.find(params[:id])
params[:id]
params[id:]
params
exit
params
exit
params[:room]
exit
board_array
exit
    end
      board_array << board_object
      }
        is_admin: board_user.is_admin
        public: board_user.board.public,
        subject: board_user.board.subject,
        id: board_user.board.id,
      board_object = {
    self.board_users.each do |board_user|
board_array = []
self.board_users.each {|bu| puts bu}
self.board_users.each
self.board_users
self
exit
@user = User.create(user_params)
params
exit
params
exit
@user.errors
@user = User.create(user_params)
params
exit
params
params[:username]
User.find_by(username: "Nick")
user = User.find_by(username: params[:username])
User.all
user
user = User.find_by(username: params[:username])
params
exit
      render json: { jwt: token, yay: true }
      token = issue_token(payload)
      payload = {user_id: user.id}
if user && user.authenticate(params[:password])
user.authenticate(params[:password])
user
user = User.find_by(username: params[:username])
user = User.create(params.require(:user).permit(:username, :password))
params
exit
user = User.create(params.require(:user).permit(:username, :password))
params
